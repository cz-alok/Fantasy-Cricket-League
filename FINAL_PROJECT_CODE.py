4# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PROJECT.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from Calculate_points import player_points
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from open_team import Ui_Dialog as Open   
from new_team import Ui_Create as create     
from evaluate import Ui_Evaluate as Eva  

#Connecting To Database File

import sqlite3
fant=sqlite3.connect('CricketFantasyLeague.db') 
fantcurs=fant.cursor()


    
class Ui_MainWindow(object):
    
    def __init__(self):
        self.createDialog = QtWidgets.QMainWindow()
        self.create_screen = create()
        self.create_screen.setupUi(self.createDialog)

        self.EvaluateWindow = QtWidgets.QMainWindow()
        self.Eva_screen = Eva()
        self.Eva_screen.setupUi(self.EvaluateWindow)

        self.openDialog = QtWidgets.QMainWindow()
        self.open_screen = Open()
        self.open_screen.setupUi(self.openDialog)

        
    def file_open(self): # File Opening Menu
        self.open_screen.setupUi(self.openDialog)
        self.openDialog.show()
        self.open_screen.open_btn.clicked.connect(self.openteam)

    
    def file_evaluate(self): # Evaluate Opening Menu
        self.Eva_screen.setupUi(self.EvaluateWindow)
        self.EvaluateWindow.show()


    def setupUi(self, MainWindow):

        # Initialising Points And Counts
        self.avail_points = 1000
        self.used_points = 0
        self.tt_count = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.alrdscount = 0
        self.wicketerscount = 0
        
        # Initialising Lists
        self.a = []     # bowler names list
        self.b = []     #  batsman names list
        self.c = []     #  allrounders names list
        self.d = []     #wicketer names list
        self.list1 = []     # selectedplayer's list
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(760, 673)
        MainWindow.setStyleSheet("background-color: rgb(200, 133, 99);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 151, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(40, 200, 681, 431))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.frame_3 = QtWidgets.QFrame(self.horizontalLayoutWidget_2)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.frame_3)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 80, 291, 341))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.Available_players = QtWidgets.QListWidget(self.horizontalLayoutWidget_3)
        self.Available_players.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Available_players.setObjectName("Available_players")
        self.horizontalLayout_5.addWidget(self.Available_players)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame_3)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 0, 291, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rb_BAT = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rb_BAT.setFont(font)
        self.rb_BAT.setObjectName("rb_BAT")
        self.horizontalLayout.addWidget(self.rb_BAT)
        self.rb_BOW = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rb_BOW.setFont(font)
        self.rb_BOW.setObjectName("rb_BOW")
        self.horizontalLayout.addWidget(self.rb_BOW)
        self.rb_AR = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rb_AR.setFont(font)
        self.rb_AR.setObjectName("rb_AR")
        self.horizontalLayout.addWidget(self.rb_AR)
        self.rb_WK = QtWidgets.QRadioButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.rb_WK.setFont(font)
        self.rb_WK.setObjectName("rb_WK")
        self.horizontalLayout.addWidget(self.rb_WK)
        self.horizontalLayout_4.addWidget(self.frame_3)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.frame_2 = QtWidgets.QFrame(self.horizontalLayoutWidget_2)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.frame_2)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(10, 80, 291, 341))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.Select_players = QtWidgets.QListWidget(self.horizontalLayoutWidget_4)
        self.Select_players.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Select_players.setObjectName("Select_players")
        self.horizontalLayout_6.addWidget(self.Select_players)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.frame_2)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(10, 0, 291, 80))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_15 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_7.addWidget(self.label_15)
        self.Team_name = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        self.Team_name.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.Team_name.setFont(font)
        self.Team_name.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 170, 0);")
        self.Team_name.setObjectName("Team_name")
        self.horizontalLayout_7.addWidget(self.Team_name)
        self.horizontalLayout_4.addWidget(self.frame_2)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 40, 721, 80))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_8 = QtWidgets.QLabel(self.frame)
        self.label_8.setGeometry(QtCore.QRect(560, 0, 161, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_8.setObjectName("label_8")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(190, 0, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.frame)
        self.label_6.setGeometry(QtCore.QRect(370, 0, 131, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_6.setObjectName("label_6")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(10, 0, 121, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_2.setObjectName("label_2")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(170, 10, 3, 61))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(350, 10, 3, 61))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(520, 10, 3, 61))
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.BAT = QtWidgets.QLabel(self.frame)
        self.BAT.setEnabled(True)
        self.BAT.setGeometry(QtCore.QRect(50, 40, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.BAT.setFont(font)
        self.BAT.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);")
        self.BAT.setAlignment(QtCore.Qt.AlignCenter)
        self.BAT.setObjectName("BAT")
        self.BOW = QtWidgets.QLabel(self.frame)
        self.BOW.setEnabled(True)
        self.BOW.setGeometry(QtCore.QRect(210, 40, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.BOW.setFont(font)
        self.BOW.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);")
        self.BOW.setAlignment(QtCore.Qt.AlignCenter)
        self.BOW.setObjectName("BOW")
        self.AR = QtWidgets.QLabel(self.frame)
        self.AR.setEnabled(True)
        self.AR.setGeometry(QtCore.QRect(400, 40, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.AR.setFont(font)
        self.AR.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);\n"
"")
        self.AR.setAlignment(QtCore.Qt.AlignCenter)
        self.AR.setObjectName("AR")
        self.WK = QtWidgets.QLabel(self.frame)
        self.WK.setEnabled(True)
        self.WK.setGeometry(QtCore.QRect(580, 40, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.WK.setFont(font)
        self.WK.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);")
        self.WK.setAlignment(QtCore.Qt.AlignCenter)
        self.WK.setObjectName("WK")
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setGeometry(QtCore.QRect(40, 140, 691, 51))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.label_12 = QtWidgets.QLabel(self.frame_4)
        self.label_12.setEnabled(True)
        self.label_12.setGeometry(QtCore.QRect(400, 20, 81, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_12.setObjectName("label_12")
        self.label_10 = QtWidgets.QLabel(self.frame_4)
        self.label_10.setEnabled(True)
        self.label_10.setGeometry(QtCore.QRect(10, 20, 111, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_10.setObjectName("label_10")
        self.points_availables = QtWidgets.QLabel(self.frame_4)
        self.points_availables.setEnabled(True)
        self.points_availables.setGeometry(QtCore.QRect(150, 20, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.points_availables.setFont(font)
        self.points_availables.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);")
        self.points_availables.setAlignment(QtCore.Qt.AlignCenter)
        self.points_availables.setObjectName("points_availables")
        self.points_used = QtWidgets.QLabel(self.frame_4)
        self.points_used.setEnabled(True)
        self.points_used.setGeometry(QtCore.QRect(510, 20, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.points_used.setFont(font)
        self.points_used.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(255, 0, 0);")
        self.points_used.setAlignment(QtCore.Qt.AlignCenter)
        self.points_used.setObjectName("points_used")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 760, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        self.menuManage_Team.setObjectName("menuManage_Team")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.NEW_team = QtWidgets.QAction(MainWindow)
        self.NEW_team.setObjectName("NEW_team")
        self.OPEN_team = QtWidgets.QAction(MainWindow)
        self.OPEN_team.setObjectName("OPEN_team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.EVALUATE_team = QtWidgets.QAction(MainWindow)
        self.EVALUATE_team.setObjectName("EVALUATE_team")
        self.actionQUIT = QtWidgets.QAction(MainWindow)
        self.actionQUIT.setObjectName("actionQUIT")
        self.SAVE_team = QtWidgets.QAction(MainWindow)
        self.SAVE_team.setObjectName("SAVE_team")
        self.menuManage_Team.addAction(self.NEW_team)
        self.menuManage_Team.addAction(self.OPEN_team)
        self.menuManage_Team.addAction(self.SAVE_team)
        self.menuManage_Team.addAction(self.EVALUATE_team)
        self.menuManage_Team.addSeparator()
        self.menuManage_Team.addAction(self.actionQUIT)
        self.menubar.addAction(self.menuManage_Team.menuAction())

        #Action Triggered
        self.NEW_team.triggered.connect(self.file_new)
        self.OPEN_team.triggered.connect(self.file_open)
        self.SAVE_team.triggered.connect(self.file_save)
        self.EVALUATE_team.triggered.connect(self.file_evaluate)
        self.actionQUIT.triggered.connect(self.quit)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Double Click
        self.Available_players.itemDoubleClicked.connect(self.removelist1)
        self.Select_players.itemDoubleClicked.connect(self.removelist2)

        #Stats Of Player
        self.stats = {}

        self.create_screen.save_name.clicked.connect(self.name_change)

        #RadioButtons 
        self.rb_BAT.clicked.connect(self.load_names)
        self.rb_WK.clicked.connect(self.load_names)
        self.rb_BOW.clicked.connect(self.load_names)
        self.rb_AR.clicked.connect(self.load_names)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Your Selections :"))
        self.rb_BAT.setText(_translate("MainWindow", "BAT"))
        self.rb_BOW.setText(_translate("MainWindow", "BOW"))
        self.rb_AR.setText(_translate("MainWindow", "AR"))
        self.rb_WK.setText(_translate("MainWindow", "WK"))
        self.label_15.setText(_translate("MainWindow", "Team Name  : "))
        self.Team_name.setText(_translate("MainWindow", "Displayed Here"))
        self.label_8.setText(_translate("MainWindow", "Wicket-keeper (WK)"))
        self.label_4.setText(_translate("MainWindow", "Bowlers (BOW)"))
        self.label_6.setText(_translate("MainWindow", "Allrounders (AR)"))
        self.label_2.setText(_translate("MainWindow", "Batsmen (BAT)"))
        self.BAT.setText(_translate("MainWindow", "##"))
        self.BOW.setText(_translate("MainWindow", "##"))
        self.AR.setText(_translate("MainWindow", "##"))
        self.WK.setText(_translate("MainWindow", "##"))
        self.label_12.setText(_translate("MainWindow", "Points Used"))
        self.label_10.setText(_translate("MainWindow", "Points Available"))
        self.points_availables.setText(_translate("MainWindow", "####"))
        self.points_used.setText(_translate("MainWindow", "####"))
        self.menuManage_Team.setTitle(_translate("MainWindow", "Manage Team"))
        self.NEW_team.setText(_translate("MainWindow", "NEW Team"))
        self.OPEN_team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.EVALUATE_team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionQUIT.setText(_translate("MainWindow", "QUIT"))
        self.SAVE_team.setText(_translate("MainWindow", "SAVE Team"))

        #New File Menu
    def file_new(self):
        self.createDialog.show()

        
    def name_change(self):
        teamname = self.create_screen.Team_name.text()
        fantcurs.execute("SELECT DISTINCT name FROM teams")
        l = fantcurs.fetchall()
        for i in l:
            if i[0] == teamname:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("Team with same name already exists!!\nPlease choose another name")
                msg.setWindowTitle("Invalid Team Name")
                msg.exec_()
                return 0
        if len(teamname) == 0:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("You cannot leave the field blank!!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        elif teamname.isnumeric():
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Please enter a valid teamname\n(Name must contain atleast one character)!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        else:
            self.reset()
            self.tname = self.create_screen.Team_name.text()
            self.Team_name.setText(str('    '+self.tname))
            self.createDialog.close()

    #To Reset All Counts And Lists
    def reset(self):
        self.enablebuttons()
        self.load_names()
        self.used_points = 0
        self.alrdscount = 0
        self.wicketerscount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.tt_count = 0
        self.avail_points = 1000
        self.points_availables.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))
        self.list1.clear()
        self.load_names()

        self.Select_players.clear()

    #Save Team Menu
    def file_save(self):
        if not self.error():  #If There Is An Error
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText(' Inufficient Players OR Points !!')
            msg.setWindowTitle("Fantasy Cricket")
            msg.exec_()
        elif self.error():  #If No Error
            try:
                fantcurs.execute("SELECT DISTINCT name FROM teams;")
                x = fantcurs.fetchall()
                for i in x:
                    if self.Team_name.text() == i[0]: 
                        print('Updating already there')
                        fantcurs.execute("DELETE  FROM teams WHERE name='" + self.Team_name.text() + "';") 
            except:
                print('error')
            for i in range(self.Select_players.count()):
               # print('----addding--')
               # print('teamnane: ',self.Team_name.text())
               # print('playername: ',self.list1[i])
               # print('points: ', player_points[self.list1[i]])
                 
                try:
                    fantcurs.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?)",
                                     (self.Team_name.text(), self.list1[i], player_points[self.list1[i]]))

                   # self.file_evaluate()
                except:
                    print('error in operation!')
            fant.commit()
        else:
            print('---error in operation')

    #Quiting Method
    def quit(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText(' !Bye! \n Thank You!')
        msg.setWindowTitle("Fantasy Cricket")
        msg.exec_()
        # print('exit')
        sys.exit()            

    #On RadioButtons clickes
    def load_names(self):
        Batsman = 'BAT'
        WicketKeeper = 'WK'
        Allrounder = 'AR'
        Bowler = 'BWL'
        sql1 = "SELECT player,value from stats WHERE ctg = '" + Batsman + "';"
        sql2 = "SELECT Player,value from stats WHERE ctg = '" + WicketKeeper + "';"
        sql3 = "SELECT Player,value from stats WHERE ctg ='" + Allrounder + "';"
        sql4 = "SELECT Player,value from stats WHERE ctg = '" + Bowler + "';"

        fantcurs.execute(sql1)
        x = fantcurs.fetchall()
        fantcurs.execute(sql4)
        y = fantcurs.fetchall()
        fantcurs.execute(sql3)
        z = fantcurs.fetchall()
        fantcurs.execute(sql2)
        w = fantcurs.fetchall()

        batsmen = []
        bowlers = []
        allrounders = []
        wcktkeepers = []

        for k in x:
            batsmen.append(k[0])
            self.b.append(k[0])
            self.stats[k[0]] = k[1]
        for k in y:
            bowlers.append(k[0])
            self.stats[k[0]] = k[1]
            self.a.append(k[0])
        for k in w:
            wcktkeepers.append(k[0])
            self.stats[k[0]] = k[1]
            self.d.append(k[0])
        for k in z:
            allrounders.append(k[0])
            self.stats[k[0]] = k[1]
            self.c.append(k[0])
        for i in self.list1:
            if i in allrounders:
                allrounders.remove(i)
            elif i in batsmen:
                batsmen.remove(i)
            elif i in bowlers:
                bowlers.remove(i)
            elif i in wcktkeepers:
                wcktkeepers.remove(i)

        if self.rb_BAT.isChecked() == True:
            self.Available_players.clear()
            for i in range(len(batsmen)):
                item = QtWidgets.QListWidgetItem(batsmen[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.Available_players.addItem(item)
        elif self.rb_BOW.isChecked() == True:
            self.Available_players.clear()
            for i in range(len(bowlers)):
                item = QtWidgets.QListWidgetItem(bowlers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.Available_players.addItem(item)
        elif self.rb_AR.isChecked() == True:
            self.Available_players.clear()
            for i in range(len(allrounders)):
                item = QtWidgets.QListWidgetItem(allrounders[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.Available_players.addItem(item)

        elif self.rb_WK.isChecked() == True:
            self.Available_players.clear()
            for i in range(len(wcktkeepers)):
                item = QtWidgets.QListWidgetItem(wcktkeepers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.Available_players.addItem(item)

    #Removes From Availabe Players And Add To Selected Players
    def removelist1(self, item):   
        self.conditions_1(item.text())
        self.Available_players.takeItem(self.Available_players.row(item))
        self.Select_players.addItem(item.text())
        self.tt_count = self.Select_players.count()
        self.list1.append(item.text())
        self.error()

    # Adding And Deducting Points
    def conditions_1(self, cat):   
        self.avail_points -= self.stats[cat]
        self.used_points += self.stats[cat]
        if cat in self.a:
            self.bowlerscount += 1
        elif cat in self.d:
            self.wicketerscount += 1
        elif cat in self.c:
            self.alrdscount += 1
        elif cat in self.b:
            self.batsmencount += 1

        self.points_availables.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))

    # Adding And Deducting Points
    def conditions_2(self, cat):    
        self.avail_points += self.stats[cat]
        self.used_points -= self.stats[cat]
        if cat in self.a:
            self.bowlerscount -= 1
        elif cat in self.d:
            self.wicketerscount -= 1
        elif cat in self.c:
            self.alrdscount -= 1
        elif cat in self.b:
            self.batsmencount -= 1

        self.points_availables.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.BOW.setText(str(self.bowlerscount))
        self.BAT.setText(str(self.batsmencount))
        self.AR.setText(str(self.alrdscount))
        self.WK.setText(str(self.wicketerscount))

    #Removes From Selected Players And Add To Available Players
    def removelist2(self, item):   
        self.Select_players.takeItem(self.Select_players.row(item))
        self.Available_players.addItem(item.text())
        self.list1.remove(item.text())
        # self.error()
        self.tt_count = self.Select_players.count()
        self.conditions_2(item.text())

    
    def openteam(self):  
        self.reset()
        teamname = self.open_screen.cb_open.currentText()
        self.Team_name.setText(teamname)
        self.enablebuttons()
        fantcurs.execute("SELECT players from teams WHERE name= '" + teamname + "';")
        x=fantcurs.fetchall()
        score=[]
        for i in x:
            fantcurs.execute("SELECT value from stats WHERE player='"+i[0]+"';")
            y=fantcurs.fetchone()
            score.append(y[0])
        # print(score)
        sum=0
        for i in score:
            sum+=i
        self.Select_players.clear()
        self.load_names()
        for i in x:
            self.Select_players.addItem(i[0])
            self.list1.append(i[0])
            self.conditions_1(i[0])
        self.used_points = sum
        self.avail_points = 1000 - sum
        self.points_availables.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.openDialog.close()

    def enablebuttons(self):
        self.rb_BAT.setEnabled(True)
        self.rb_BOW.setEnabled(True)
        self.rb_AR.setEnabled(True)
        self.rb_WK.setEnabled(True)
        
    def disablebuttons(self):
        self.rb_BAT.setEnabled(False)
        self.rb_BOW.setEnabled(False)
        self.rb_AR.setEnabled(False)
        self.rb_WK.setEnabled(False)

    def error(self):
        msg = QMessageBox()
        if self.wicketerscount > 1:
            msg.setIcon(QMessageBox.Critical)
            # msg.setText("Error")
            msg.setInformativeText('Only one wicketkeeper is allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        elif self.tt_count > 11:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('No more than one players allowed!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
            return 0
        elif self.tt_count < 11 :
            return 0
        elif self.wicketerscount < 1:
            return 0
        elif self.avail_points <= -1:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Not enough points!')
            msg.setWindowTitle("Selection Cricket")
            msg.exec_()
            return 0

        return 1


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
